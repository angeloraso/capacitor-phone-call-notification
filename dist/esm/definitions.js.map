{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\nexport type NotificationType = 'incoming' | 'inProgress' | 'missed';\nexport type NotificationResponse = 'tap' | 'answer' | 'decline' | 'terminate' | 'hold';\n\nexport interface PermissionStatus {\n  display: PermissionState;\n}\nexport interface NotificationSettings {\n  type: NotificationType;\n  duration: number;\n  callerName: string;\n  callerNumber: string;\n  icon: string;\n  picture: string;\n  thereIsACallInProgress: boolean;\n  declineButtonText: string;\n  declineButtonColor: string;\n  answerButtonText: string;\n  answerButtonColor: string;\n  terminateButtonText: string;\n  terminateButtonColor: string;\n  holdButtonText: string;\n  holdButtonColor: string;\n  terminateAndAnswerButtonText: string;\n  terminateAndAnswerButtonColor: string;\n  declineSecondCallButtonText: string;\n  declineSecondCallButtonColor: string;\n  holdAndAnswerButtonText: string;\n  holdAndAnswerButtonColor: string;\n  color: string;\n  channelName: string;\n  channelDescription: string;\n}\nexport interface PhoneCallNotificationPlugin {\n  show(data?: Partial<NotificationSettings>): Promise<void>;\n  hide(data: { type: NotificationType }): Promise<void>;\n  checkPermissions(): Promise<PermissionStatus>;\n  requestPermissions(): Promise<PermissionStatus>;\n  addListener(\n    eventName: 'response',\n    listenerFunc: (data: { response: NotificationResponse }) => void,\n  ): Promise<PluginListenerHandle>;\n  removeAllListeners(): Promise<void>;\n}\n"]}